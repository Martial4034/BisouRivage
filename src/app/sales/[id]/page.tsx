"use client";

import * as React from "react";
import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import { useCart } from "@/app/hooks/use-cart";
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { Skeleton } from "@/app/components/ui/skeleton";
import { Button } from "@/app/components/ui/button";
import Image from "next/image";
import { doc, getDoc, getDocs, collection } from "firebase/firestore";
import { db } from "@/app/firebase";
import { useToast } from "@/app/hooks/use-toast";
import { CircularProgress } from '@mui/material';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/app/components/ui/tooltip";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/app/components/ui/carousel";
import { useMediaQuery } from "react-responsive";
import useEmblaCarousel from "embla-carousel-react";
import Head from "next/head";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/app/components/ui/accordion";
import PromotionalBanner from "@/app/components/PromotionalBanner";

// Interfaces import√©es
import { ImageFirestoreData, ImageData } from "@/app/types";

// Ajout des interfaces pour les formats
interface FrameOption {
  name: string;
  color: string;
  imageUrl: string;
  price: number;
  available: boolean;
}

interface Format {
  id: string;
  size: string;
  frameOptions: FrameOption[];
}

// Ajouter cette interface avec les autres
interface ColorPoint {
  color: string;
  urlPoint: string;
}

// Ajouter ces constantes en haut du fichier
const FRAME_STYLES = {
  container: {
    position: 'relative' as const,
    width: '100%',
    height: '100%',
  },
  frame: {
    position: 'absolute' as const,
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    zIndex: 2,
  },
  image: {
    position: 'absolute' as const,
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: '70%',
    height: '70%',
    zIndex: 1,
  }
};

// Composant de d√©bogage
const DebugInfo = ({ 
  data, 
  formats,
  selectedSize,
  selectedColor,
  frameOption,
  selectedFrame,
  colorPoints,
  error 
}: { 
  data: ImageData | null;
  formats: Format[];
  selectedSize: string | null;
  selectedColor: string | null;
  frameOption: "avec" | "sans";
  selectedFrame: FrameOption | null;
  colorPoints: ColorPoint[];
  error?: string;
}) => {
  // Trouver le format √©quivalent pour la taille s√©lectionn√©e
  const selectedSizeData = data?.sizes.find(s => s.size === selectedSize);
  const equivalentFrameSize = selectedSizeData?.equivalentFrameSize;
  const formatData = formats.find(f => f.size === equivalentFrameSize);

  const debugData = {
    "üéØ S√©lections actuelles": {
      "Taille s√©lectionn√©e": selectedSize,
      "Taille √©quivalente cadre": equivalentFrameSize,
      "Option de cadre": frameOption,
      "Couleur s√©lectionn√©e": selectedColor,
    },
    "üì¶ Informations produit": {
      "Format du produit": data?.format,
      "Stock disponible": selectedSizeData ? {
        "Taille": selectedSizeData.size,
        "Stock initial": selectedSizeData.initialStock,
        "Stock restant": selectedSizeData.stock,
        "Prochain num√©ro": selectedSizeData.nextSerialNumber,
      } : null,
    },
    "üé® Couleurs disponibles": colorPoints.map(point => ({
      color: point.color,
      url: point.urlPoint
    })),
    "üñºÔ∏è Format correspondant": formatData ? {
      "Taille": formatData.size,
      "Options de cadre": formatData.frameOptions.map(option => ({
        nom: option.name,
        couleur: option.color,
        prix: option.price,
        disponible: option.available,
        imageUrl: option.imageUrl
      }))
    } : null,
    "üîç Cadre s√©lectionn√©": selectedFrame ? {
      nom: selectedFrame.name,
      couleur: selectedFrame.color,
      prix: selectedFrame.price,
      imageUrl: selectedFrame.imageUrl
    } : null,
  };

  return (
    <div className="fixed top-4 right-4 p-4 bg-black/80 text-white rounded-lg max-w-lg max-h-[80vh] overflow-auto">
      <h3 className="text-xl font-bold mb-2">Debug Info</h3>
      {error && (
        <div className="mb-4 p-2 bg-red-500/50 rounded">
          <h4 className="font-bold">‚ùå Erreur:</h4>
          <p>{error}</p>
        </div>
      )}
      <pre className="text-xs whitespace-pre-wrap">
        {JSON.stringify(debugData, null, 2)}
      </pre>
    </div>
  );
};

export default function ImageDetails({ params }: { params: { id: string } }) {
  const [imageData, setImageData] = useState<ImageData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedSize, setSelectedSize] = useState<string | null>(null);
  const [selectedPrice, setSelectedPrice] = useState<number | null>(null);
  const [isAdded, setIsAdded] = useState(false);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const { addItem } = useCart();
  const router = useRouter();
  const { toast } = useToast();

  // D√©tecter si l'utilisateur est sur mobile
  const isMobile = useMediaQuery({ maxWidth: 767 });

  // R√©f√©rence pour Embla Carousel
  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: false });

  // Ajouter cet √©tat avec les autres √©tats au d√©but du composant
  const [frameOption, setFrameOption] = useState<"avec" | "sans">("avec");

  // √âtats existants...
  const [formats, setFormats] = useState<Format[]>([]);
  const [isLoadingFormats, setIsLoadingFormats] = useState(true);
  const [selectedFrame, setSelectedFrame] = useState<FrameOption | null>(null);
  const [basePrice, setBasePrice] = useState<number>(0);
  const [debugError, setDebugError] = useState<string>("");

  // Ajouter ces √©tats
  const [colorPoints, setColorPoints] = useState<ColorPoint[]>([]);
  const [selectedColor, setSelectedColor] = useState<string | null>(null);
  const [isLoadingColors, setIsLoadingColors] = useState(true);

  // Ajouter cette fonction pour r√©cup√©rer les points de couleur
  const fetchColorPoints = async () => {
    try {
      console.log("üé® R√©cup√©ration des points de couleur...");
      const colorDoc = await getDoc(doc(db, 'formats', 'couleurs'));
      
      if (!colorDoc.exists()) {
        console.error("‚ùå Document des couleurs non trouv√©");
        return;
      }

      const colorData = colorDoc.data();
      console.log("üìä Points de couleur r√©cup√©r√©s:", colorData.colors);
      setColorPoints(colorData.colors);
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des couleurs:", error);
    } finally {
      setIsLoadingColors(false);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      console.log("üöÄ D√©marrage du fetchData");
      setIsLoading(true);
      try {
        // R√©cup√©ration des donn√©es du produit
        console.log("üì¶ R√©cup√©ration du produit:", params.id);
        const docRef = doc(db, "uploads", params.id);
        const docSnap = await getDoc(docRef);

        if (!docSnap.exists()) {
          const error = "‚ùå Document non trouv√©";
          console.error(error);
          setDebugError(error);
          router.push("/404");
          return;
        }

        const data = docSnap.data() as ImageFirestoreData;
        console.log("üìÑ Donn√©es du produit:", data);

        if (!data) {
          const error = "‚ùå Les donn√©es du produit sont vides";
          setDebugError(error);
          console.error(error);
          return;
        }

        // Validation des donn√©es requises
        const hasRequiredFields = 
          data.artisteName && 
          data.format && 
          data.images && 
          data.sizes;

        if (!hasRequiredFields) {
          const error = "‚ùå Champs requis manquants dans les donn√©es du produit";
          setDebugError(error);
          console.error(error);
          return;
        }

        // R√©cup√©ration des formats
        console.log("üéØ R√©cup√©ration des formats");
        const formatsSnapshot = await getDocs(collection(db, 'formats'));
        const formatsData = formatsSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        })) as Format[];

        if (formatsData.length === 0) {
          const error = "‚ùå Aucun format trouv√© dans la base de donn√©es";
          setDebugError(error);
          console.error(error);
          return;
        }

        console.log("üìä Formats r√©cup√©r√©s:", formatsData);

        // Traitement des donn√©es
        const createdAtDate = data.createdAt.toDate();
        const createdAtFormatted = format(createdAtDate, "dd MMMM yyyy", {
          locale: fr,
        });

        setImageData({
          artisteEmail: data.artisteEmail,
          artisteId: data.artisteId,
          artisteName: data.artisteName,
          createdAt: createdAtFormatted,
          description: data.description,
          format: data.format,
          images: data.images,
          mainImage: data.mainImage,
          sizes: data.sizes,
        });

        // V√©rification des tailles disponibles
        const availableSize = data.sizes.find((size) => size.stock > 0) || data.sizes[0];
        if (!availableSize) {
          const error = "‚ùå Aucune taille disponible pour ce produit";
          setDebugError(error);
          console.error(error);
          return;
        }

        console.log("üìè Taille disponible trouv√©e:", availableSize);
        setSelectedSize(availableSize.size);

        // V√©rification du format correspondant
        const formatData = formatsData.find(f => f.size === availableSize.equivalentFrameSize);
        if (!formatData) {
          const error = `‚ùå Format ${availableSize.equivalentFrameSize} non trouv√© dans la base`;
          setDebugError(error);
          console.error(error);
          return;
        }

        setFormats(formatsData);

        // Ajouter l'appel pour r√©cup√©rer les couleurs
        await fetchColorPoints();
        
      } catch (error: unknown) {
        const errorMessage = `üö® Erreur lors du chargement: ${error instanceof Error ? error.message : 'Erreur inconnue'}`;
        console.error(errorMessage);
        setDebugError(errorMessage);
      } finally {
        setIsLoading(false);
        setIsLoadingFormats(false);
      }
    };

    fetchData();
  }, [params.id, router]);

  useEffect(() => {
    if (emblaApi) {
      emblaApi.on("select", () => {
        setSelectedImageIndex(emblaApi.selectedScrollSnap());
      });
    }
  }, [emblaApi]);

  const handleAddToCart = async () => {
    try {
      if (!selectedSize) {
        toast({
          title: "Format requis",
          description: "Veuillez s√©lectionner un format avant d'ajouter au panier",
          variant: "destructive",
        });
        return;
      }

      if (frameOption === "avec" && !selectedFrame) {
        toast({
          title: "Couleur de cadre requise",
          description: "Veuillez s√©lectionner une couleur de cadre",
          variant: "destructive",
        });
        return;
      }

      // V√©rifier le stock
      const sizeData = imageData?.sizes.find(s => s.size === selectedSize);
      if (!sizeData || sizeData.stock <= 0) {
        toast({
          title: "Stock √©puis√©",
          description: "Ce format n'est plus disponible",
          variant: "destructive",
        });
        return;
      }

      // Cr√©er l'item pour le panier
      const cartItem = {
        id: params.id,
        size: selectedSize,
        frameOption,
        frameColor: frameOption === "avec" ? selectedFrame?.color : undefined,
        quantity: 1
      };

      // V√©rifier le prix avant l'ajout
      const priceResponse = await fetch('/api/product/price', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          productId: params.id,
          size: selectedSize,
          frameOption,
          frameColor: selectedFrame?.color
        }),
      });

      if (!priceResponse.ok) {
        throw new Error("Erreur lors de la v√©rification du prix");
      }

      const priceData = await priceResponse.json();
      console.log("üí∞ Prix v√©rifi√©:", priceData);

      // Ajouter au panier
      addItem(cartItem);
      setIsAdded(true);

      toast({
        title: "Ajout√© au panier",
        description: `${selectedSize} ${frameOption === "avec" ? `avec cadre ${selectedFrame?.name || ''}` : "sans cadre"}`,
      });

      setTimeout(() => {
        setIsAdded(false);
      }, 2000);

    } catch (error) {
      console.error("Erreur lors de l'ajout au panier:", error);
      toast({
        title: "Erreur",
        description: "Une erreur est survenue lors de l'ajout au panier",
        variant: "destructive",
      });
    }
  };

  const handleImageClick = (index: number) => {
    setSelectedImageIndex(index);
    if (emblaApi) {
      emblaApi.scrollTo(index);
    }
  };

  // Fonction pour calculer le prix total
  const calculatePrice = () => {
    console.log("üí≤ Calcul du prix - Donn√©es actuelles:", {
      selectedSize,
      frameOption,
      selectedFrame
    });
    
    if (!selectedSize) return 0;
    
    if (frameOption === "sans") {
      const sizeData = imageData?.sizes.find(s => s.size === selectedSize);
      console.log("üìè Donn√©es de taille trouv√©es:", sizeData);
      
      const formatData = formats.find(f => f.size === sizeData?.equivalentFrameSize);
      console.log("üìê Format correspondant:", formatData);
      
      const baseFrameOption = formatData?.frameOptions.find(f => f.color === "none");
      console.log("üè∑Ô∏è Prix de base trouv√©:", baseFrameOption?.price);
      
      return baseFrameOption?.price || 0;
    } else {
      console.log("üñºÔ∏è Prix du cadre s√©lectionn√©:", selectedFrame?.price);
      return selectedFrame?.price || 0;
    }
  };

  // Fonction pour g√©rer le changement de taille
  const handleSizeChange = (size: string) => {
    console.log("üîÑ Changement de taille:", size);
    setSelectedSize(size);
    setSelectedFrame(null);
    
    const sizeData = imageData?.sizes.find(s => s.size === size);
    console.log("üìè Donn√©es de la nouvelle taille:", sizeData);
    
    const formatData = formats.find(f => f.size === sizeData?.equivalentFrameSize);
    console.log("üìê Nouveau format correspondant:", formatData);
    
    const baseFrameOption = formatData?.frameOptions.find(f => f.color === "none");
    console.log("üí∞ Nouveau prix de base:", baseFrameOption?.price);
    
    if (baseFrameOption) {
      setBasePrice(baseFrameOption.price);
    }
  };

  // Ajouter cette fonction pour g√©rer la s√©lection de couleur
  const handleColorSelect = (color: string) => {
    console.log("üé® Couleur s√©lectionn√©e:", color);
    setSelectedColor(color);
    
    // Trouver le frame correspondant
    const selectedFormat = formats.find(f => {
      const sizeData = imageData?.sizes.find(s => s.size === selectedSize);
      return f.size === sizeData?.equivalentFrameSize;
    });

    const frameOption = selectedFormat?.frameOptions.find(f => f.color === color);
    console.log("üñºÔ∏è Option de cadre correspondante:", frameOption);
    
    if (frameOption) {
      setSelectedFrame(frameOption);
    }
  };

  if (isLoading) {
    console.log("‚åõ Affichage du loader");
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="flex flex-col md:flex-row gap-8">
          {/* Section Image Skeleton */}
          <div className="flex-1">
            <Skeleton className="w-full h-96 mb-4" />
            <div className="grid grid-cols-4 gap-2">
              {Array.from({ length: 4 }).map((_, index) => (
                <Skeleton key={index} className="w-20 h-20" />
              ))}
            </div>
          </div>

          {/* Section D√©tails Skeleton */}
          <div className="flex-1 border-2 border-gray-300 p-6 rounded-none shadow" style={{ height: "400px" }}>
            <Skeleton className="h-8 mb-4" />
            <Skeleton className="h-4 mb-2" />
            <Skeleton className="h-4 mb-2" />
            <Skeleton className="h-4 mb-4" />
            <Skeleton className="h-6 mb-4 w-1/2" />
            <Skeleton className="h-10 w-full" />
          </div>
        </div>
      </div>
    );
  }

  if (!imageData) {
    console.log("‚ùå Pas de donn√©es d'image");
    return <div>Aucune donn√©e disponible</div>;
  }

  console.log("üé® Rendu de la page avec les donn√©es:", {
    imageData,
    formats,
    selectedSize,
    frameOption,
    selectedFrame
  });

  // V√©rifier si le format est vertical
  const isVertical = imageData.format.toLowerCase() === "vertical";

  // Dimensions based on format
  const mainImageHeight = isVertical ? 625 : 400; // 16:9 aspect ratio for horizontal images
  const mainImageWidth = isVertical ? 410 : 600;
  const thumbnailHeight = isVertical ? 125 : 100;

  return (
    <>
      <Head>
        <title>
          {params.id} - {imageData.artisteName} - BisouRivage
        </title>
        <meta name="description" content={imageData.description} />
        <meta
          property="og:title"
          content={`${params.id} - ${imageData.artisteName} - BisouRivage`}
        />
        <meta property="og:description" content={imageData.description} />
        <meta property="og:image" content={imageData.images[0]?.link || ""} />
        <meta
          property="og:url"
          content={`https://bisourivage.fr/sales/${params.id}`}
        />
      </Head>

      <PromotionalBanner />

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <div className="flex flex-col md:flex-row gap-8">
          {/* Section Image */}
          <div className="flex-1">
            {isMobile ? (
              // Carrousel sur mobile sans autoplay
              <div>
                <Carousel ref={emblaRef} className="w-full">
                  <CarouselContent>
                    {imageData.images.map((image, index) => (
                      <CarouselItem key={index}>
                        <div
                          className={`relative w-full ${
                            isVertical ? "h-[625px]" : "h-[300px]"
                          }`}
                        >
                          <Image
                            src={image.link}
                            alt={`Image ${index + 1}`}
                            fill
                            sizes={`(max-width: 768px) 100vw, ${
                              isVertical ? "400px" : "600px"
                            }`}
                            style={{ objectFit: "cover" }}
                            className="shadow-md"
                          />
                        </div>
                      </CarouselItem>
                    ))}
                  </CarouselContent>
                </Carousel>
                {/* Barre de progression d√©coup√©e */}
                <div className="mt-2 flex justify-center space-x-1">
                  {imageData.images.map((_, index) => (
                    <div
                      key={index}
                      className={`h-1 w-6 rounded-full cursor-pointer ${
                        selectedImageIndex === index
                          ? "bg-black"
                          : "bg-gray-300"
                      }`}
                      onClick={() => handleImageClick(index)}
                    ></div>
                  ))}
                </div>
              </div>
            ) : (
              <div>
                {/* Image principale avec ou sans cadre */}
                <div className="relative mb-4" style={{ height: mainImageHeight, width: mainImageWidth }}>
                  {frameOption === "avec" && selectedFrame ? (
                    <div style={FRAME_STYLES.container}>
                      {/* Image du cadre en arri√®re-plan */}
                      <Image
                        src={selectedFrame.imageUrl}
                        alt={`Cadre ${selectedFrame.name}`}
                        fill
                        style={FRAME_STYLES.frame}
                        className="pointer-events-none"
                        priority
                      />
                      
                      {/* Image du produit centr√©e et r√©duite */}
                      <div style={FRAME_STYLES.image}>
                        <Image
                          src={imageData.images[selectedImageIndex].link}
                          alt={`Image ${selectedImageIndex + 1}`}
                          fill
                          style={{ 
                            objectFit: "contain",
                          }}
                          className="rounded-none"
                          priority
                        />
                      </div>
                    </div>
                  ) : (
                    // Image sans cadre (normale)
                    <Image
                      src={imageData.images[selectedImageIndex].link}
                      alt={`Image ${selectedImageIndex + 1}`}
                      fill
                      style={{ 
                        objectFit: isVertical ? "contain" : "cover",
                      }}
                      className="rounded-lg"
                      priority
                    />
                  )}
                </div>

                {/* Miniatures */}
                <div className="grid grid-cols-4 gap-2">
                  {imageData.images.map((image, index) => (
                    <div
                      key={index}
                      onClick={() => setSelectedImageIndex(index)}
                      className={`relative cursor-pointer ${
                        selectedImageIndex === index ? "ring-2 ring-blue-500" : ""
                      }`}
                      style={{ height: thumbnailHeight }}
                    >
                      {frameOption === "avec" && selectedFrame ? (
                        <div style={FRAME_STYLES.container}>
                          <Image
                            src={selectedFrame.imageUrl}
                            alt={`Cadre miniature ${selectedFrame.name}`}
                            fill
                            style={FRAME_STYLES.frame}
                            className="pointer-events-none"
                          />
                          <div style={FRAME_STYLES.image}>
                            <Image
                              src={image.link}
                              alt={`Miniature ${index + 1}`}
                              fill
                              style={{ objectFit: "contain" }}
                              className="rounded-none"
                            />
                          </div>
                        </div>
                      ) : (
                        // Miniature sans cadre
                        <Image
                          src={image.link}
                          alt={`Miniature ${index + 1}`}
                          fill
                          style={{ objectFit: isVertical ? "contain" : "cover" }}
                          className="rounded-lg"
                        />
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Section D√©tails */}
          <div className="flex-1 border-2 border-gray-300 p-6 rounded-none shadow">
            <h2 className="text-2xl font-semibold text-gray-800 mb-4">
              Titre : {params.id}
            </h2>
            <p className="text-md text-gray-600 mb-2">
              Artiste :{" "}
              <span className="font-semibold">{imageData.artisteName}</span>
            </p>
            <p className="text-md text-gray-600 mb-2">
              Date :{" "}
              <span className="font-semibold">{imageData.createdAt}</span>
            </p>

            <p className="text-gray-700 mb-4">{imageData.description}</p>

            {/* Ajout des nouvelles informations */}
            <div className="pl-4 mb-6 space-y-2">
              <p className="flex items-center gap-2">
                <span className="font-semibold text-gray-700">‚Üí</span>
                Impression pigment gicl√©e sur papier fine Art mat
              </p>
              <p className="flex items-center gap-2">
                <span className="text-gray-700 font-bold">‚Üí</span>
                Tirages limit√© en{" "}
                {selectedSize
                  ? imageData.sizes.find((s) => s.size === selectedSize)
                      ?.initialStock
                  : "..."}{" "}
                exemplaires
              </p>
              <p className="flex items-center gap-2">
                <span className="text-gray-700 font-semibold">‚Üí</span>
                ≈íuvre fournie avec un certificat d'authenticit√© NFC
              </p>
            </div>

            {/* S√©lection du cadre */}
            <div className="mb-6">
              <h3 className="text-xl mb-2">Options de finition</h3>
              <div className="flex gap-2 mb-4">
                <Button
                  onClick={() => {
                    console.log("üîÑ Option s√©lectionn√©e: sans cadre");
                    setFrameOption("sans");
                    setSelectedFrame(null);
                    setSelectedColor(null);
                  }}
                  variant={frameOption === "sans" ? "default" : "outline"}
                >
                  Sans cadre
                </Button>
                <Button
                  onClick={() => {
                    console.log("üîÑ Option s√©lectionn√©e: avec cadre");
                    setFrameOption("avec");
                    // Pr√©s√©lectionner la premi√®re couleur disponible (blanc par d√©faut)
                    const defaultColor = colorPoints.find(point => point.color === "blanc")?.color || colorPoints[0]?.color;
                    if (defaultColor) {
                      console.log("üé® Pr√©s√©lection de la couleur:", defaultColor);
                      handleColorSelect(defaultColor);
                    }
                  }}
                  variant={frameOption === "avec" ? "default" : "outline"}
                >
                  Avec cadre
                </Button>
              </div>

              {/* S√©lection des tailles */}
              <div className="mb-4">
                <h4 className="text-sm mb-2">Format :</h4>
                <div className="flex flex-wrap gap-2">
                  {imageData.sizes.map((size) => (
                    <Button
                      key={size.size}
                      onClick={() => handleSizeChange(size.size)}
                      variant={selectedSize === size.size ? "default" : "outline"}
                    >
                      {frameOption === "sans" ? size.size : size.equivalentFrameSize}
                    </Button>
                  ))}
                </div>
              </div>

              {/* Options de couleur si "avec cadre" est s√©lectionn√© */}
              {frameOption === "avec" && selectedSize && (
                <div className="mt-4">
                  <h4 className="text-sm mb-2">S√©lectionnez une couleur :</h4>
                  
                  {isLoadingColors ? (
                    <div className="flex justify-center">
                      <CircularProgress size={24} />
                    </div>
                  ) : (
                    <div className="flex flex-wrap gap-4 mb-6">
                      {colorPoints.map((point) => {
                        console.log(`üé® Tentative d'affichage du point de couleur:`, {
                          color: point.color,
                          url: point.urlPoint,
                          isValidUrl: point.urlPoint?.startsWith('https://'),
                        });
                        
                        // V√©rifier si l'URL est valide
                        if (!point.urlPoint || !point.urlPoint.startsWith('https://')) {
                          console.error(`‚ùå URL invalide pour ${point.color}:`, point.urlPoint);
                          return null;
                        }

                        return (
                          <div
                            key={point.color}
                            onClick={() => handleColorSelect(point.color)}
                            className={`relative cursor-pointer transition-all duration-200 ${
                              selectedColor === point.color 
                                ? 'transform scale-110' 
                                : 'hover:scale-105'
                            }`}
                          >
                            <div className={`
                              rounded-full 
                              p-0.5
                              ${selectedColor === point.color 
                                ? 'border-4 border-blue-500' 
                                : 'border border-gray-300 hover:border-gray-400'
                              }
                            `}>
                              <div className="relative w-[30px] h-[30px] rounded-full overflow-hidden bg-gray-100">
                                <Image
                                  src={point.urlPoint}
                                  alt={`Couleur ${point.color}`}
                                  width={30}
                                  height={30}
                                  className="rounded-full object-cover"
                                  priority={true}
                                  onError={(e) => {
                                    console.error(`‚ùå Erreur de chargement de l'image pour ${point.color}:`, {
                                      url: point.urlPoint,
                                      error: e
                                    });
                                    // Utiliser une couleur de fond comme fallback
                                    const target = e.target as HTMLImageElement;
                                    target.style.display = 'none';
                                    target.parentElement!.style.backgroundColor = point.color === 'blanc' ? '#FFFFFF' : 
                                                                                       point.color === 'noir' ? '#000000' : 
                                                                                       point.color === 'rouge' ? '#FF0000' : 
                                                                                       '#CCCCCC';
                                  }}
                                  onLoad={() => {
                                    console.log(`‚úÖ Image charg√©e avec succ√®s pour ${point.color}:`, point.urlPoint);
                                  }}
                                />
                              </div>
                            </div>
                            <span className="absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-xs whitespace-nowrap">
                              {point.color.replace('motif-', '')}
                            </span>
                          </div>
                        );
                      })}
                    </div>
                  )}

                  {/* Aper√ßu du cadre s√©lectionn√© */}
                  {selectedFrame && (
                    <div className="mt-8">
                      <h4 className="text-sm mb-2">Aper√ßu du cadre :</h4>
                      <div className="relative h-40 w-full">
                        <Image
                          src={selectedFrame.imageUrl}
                          alt={selectedFrame.name}
                          fill
                          style={{ objectFit: "contain" }}
                        />
                      </div>
                      <p className="text-center mt-2">{selectedFrame.name}</p>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Prix et Ajouter au Panier */}
            <div className="mt-6">
              <p className="text-2xl font-bold mb-4">Prix: {calculatePrice()}‚Ç¨</p>
              <Button
                onClick={handleAddToCart}
                className="w-full"
                disabled={isAdded || !selectedSize}
              >
                {isAdded ? "Ajout√© au panier" : "Ajouter au panier"}
              </Button>
            </div>

            {/* Message sur la disponibilit√© */}
            {selectedSize && (
              <div className="mt-4 text-sm italic text-center">
                {(() => {
                  const selectedSizeData = imageData.sizes.find(
                    (s) => s.size === selectedSize
                  );
                  if (!selectedSizeData) return null;

                  const { nextSerialNumber, initialStock } = selectedSizeData;
                  const remainingStock = selectedSizeData.stock;

                  if (nextSerialNumber === 1) {
                    return (
                      <p className="text-green-600 font-medium">
                        Vous serez le premier et obtiendrez le n¬∞1
                      </p>
                    );
                  } else if (remainingStock >= initialStock / 2) {
                    return (
                      <p className="text-blue-600 font-medium">
                        Vous obtiendrez l&apos;exemplaire n¬∞{nextSerialNumber}.
                        Vous serez parmi les {Math.ceil(initialStock / 2)}{" "}
                        premiers
                      </p>
                    );
                  } else {
                    return (
                      <p className="text-orange-600 font-medium">
                        Plus que {remainingStock} exemplaires disponibles dans
                        le format s√©lectionn√©
                      </p>
                    );
                  }
                })()}
              </div>
            )}

            {/* Accordion pour Livraison et Retours */}
            <div className="mt-6">
              <Accordion type="single" collapsible className="w-full">
                <AccordionItem value="shipping">
                  <AccordionTrigger className="text-left font-semibold">
                    Livraison et Retours
                  </AccordionTrigger>
                  <AccordionContent className="text-sm text-gray-600 space-y-4">
                    <p>
                      Comme nous manipulons des ≈ìuvres d'art fragiles, nous
                      emballons soigneusement toutes les pi√®ces et utilisons
                      uniquement un service sign√© pour toutes nos exp√©ditions.
                    </p>

                    <p>
                      Toutes les impressions A3 et A4 sont exp√©di√©es dans des
                      bo√Ætes de pr√©sentation √† plat et les impressions A2 sont
                      exp√©di√©es dans des tubes. Nous avons fait concevoir les
                      tubes sp√©cifiquement pour exp√©dier cette tailles et ils
                      sont beaucoup plus larges que les tubes habituels afin
                      qu'ils ne conservent pas leur courbure.
                    </p>

                    <p>
                      La livraison en France prend 2 √† 3 jours ouvrables, en
                      Europe environ 5 jours et dans le reste du monde 7 √† 10
                      jours. Veuillez noter que les d√©lais de livraison sont
                      actuellement variables.
                    </p>

                    <div className="space-y-2">
                      <p>Exp√©dition en France : 15‚Ç¨</p>
                      <p>Exp√©dition dans l'UE : 65‚Ç¨*</p>
                      <p>Reste du monde : 65‚Ç¨*</p>
                      <p>
                        Retrait sur rendez-vous √† Saint-Etienne au 32 Rue de la
                        R√©sistance
                      </p>
                    </div>

                    <p className="italic">
                      * Des droits de douane et des droits suppl√©mentaires
                      peuvent s'appliquer et sont √† la charge de l'acheteur.
                    </p>
                  </AccordionContent>
                </AccordionItem>
              </Accordion>
            </div>
          </div>
        </div>
      </div>

      {/* Composant de d√©bogage */}
      {/* <DebugInfo 
        data={imageData}
        formats={formats}
        selectedSize={selectedSize}
        selectedColor={selectedColor}
        frameOption={frameOption}
        selectedFrame={selectedFrame}
        colorPoints={colorPoints}
        error={debugError}
      /> */}
    </>
  );
}
